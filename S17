


local userInputService = game:GetService("UserInputService")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local mouse = localPlayer:GetMouse()
local runService = game:GetService("RunService")

local lockedTarget = nil

-- Function to toggle lock-on state
local function toggleLockOn()
    if lockedTarget then
        lockedTarget = nil  -- Unlock target if already locked
    else
        local target = mouse.Target -- Get the object the mouse is hovering over
        if target and target.Parent then
            local targetPlayer = players:GetPlayerFromCharacter(target.Parent) -- Check if it's a player
            if targetPlayer and targetPlayer ~= localPlayer then
                lockedTarget = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            else
                lockedTarget = nil
            end
        end
    end
end

-- Lock-on trigger via 'L' key or middle mouse button (scroll wheel click)
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.L or input.UserInputType == Enum.UserInputType.MouseButton2 then
            toggleLockOn()
        end
    end
end)

-- Update the camera to always face the locked target
runService.RenderStepped:Connect(function()
    if lockedTarget and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local camera = workspace.CurrentCamera
        camera.CFrame = CFrame.new(camera.CFrame.Position, lockedTarget.Position) -- Face target
    end
end)

-- Unlock the target when the player dies or respawns
local function onCharacterAdded(character)
    lockedTarget = nil  -- Unlock the target immediately after respawn
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        lockedTarget = nil  -- Unlock target when the player dies
    end)
end

-- Connect to character added event
localPlayer.CharacterAdded:Connect(onCharacterAdded)

-- If the player is already in the game, reset the lock-on state
if localPlayer.Character then
    onCharacterAdded(localPlayer.Character)
end



local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")
local tweenService = game:GetService("TweenService")

local detectionRadius = 120  -- How close the animation must be to trigger the detection
local animationIdToDetect = "rbxassetid://14348083862"  -- Animation that triggers the detection
local dodgeAnimationId = "rbxassetid://23"  -- Animation to play when dodging
local slideTime = 0.30  -- Fast sliding effect
local returnTime = 0.55  -- Fast return
local teleportCooldown = 200  -- Cooldown to prevent multiple triggers
local lastTeleport = 0  -- Stores the last teleport time
local dodgeCost = 5  -- Each dodge costs 5%

-- Load dodge animation
local dodgeAnim = Instance.new("Animation")
dodgeAnim.AnimationId = dodgeAnimationId
local dodgeTrack = humanoid:LoadAnimation(dodgeAnim)

-- Function to play dodge animation
local function playDodgeAnimation()
    if not dodgeTrack.IsPlaying then
        dodgeTrack:Play()
    end
end


local userInputService = game:GetService("UserInputService")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local mouse = localPlayer:GetMouse()
local runService = game:GetService("RunService")

local lockedTarget = nil

-- Function to toggle lock-on state
local function toggleLockOn()
    if lockedTarget then
        lockedTarget = nil  -- Unlock target if already locked
    else
        local target = mouse.Target -- Get the object the mouse is hovering over
        if target and target.Parent then
            local targetPlayer = players:GetPlayerFromCharacter(target.Parent) -- Check if it's a player
            if targetPlayer and targetPlayer ~= localPlayer then
                lockedTarget = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            else
                lockedTarget = nil
            end
        end
    end
end

-- Lock-on trigger via 'L' key or middle mouse button (scroll wheel click)
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.L or input.UserInputType == Enum.UserInputType.MouseButton2 then
            toggleLockOn()
        end
    end
end)

-- Update the camera to always face the locked target
runService.RenderStepped:Connect(function()
    if lockedTarget and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local camera = workspace.CurrentCamera
        camera.CFrame = CFrame.new(camera.CFrame.Position, lockedTarget.Position) -- Face target
    end
end)

-- Unlock the target when the player dies or respawns
local function onCharacterAdded(character)
    lockedTarget = nil  -- Unlock the target immediately after respawn
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        lockedTarget = nil  -- Unlock target when the player dies
    end)
end

-- Connect to character added event
localPlayer.CharacterAdded:Connect(onCharacterAdded)

-- If the player is already in the game, reset the lock-on state
if localPlayer.Character then
    onCharacterAdded(localPlayer.Character)
end

local player = game.Players.LocalPlayer
	local char = player.Character
	local Humanoid = char.Humanoid
	local hot = player.PlayerGui:WaitForChild("Hotbar")
	local hotbar = hot:WaitForChild("Backpack"):WaitForChild("Hotbar")

	local function cloneToolName(slot, text)
		local toolName = slot.ToolName
		if not slot:FindFirstChild("CustomName") then
			toolName.Visible = false
			local clone = toolName:Clone()
			clone.Name = "CustomName"
			clone.Parent = slot
			clone.Text = text
			clone.Visible = true
		elseif slot:FindFirstChild("CustomName") then
			if slot:FindFirstChild("CustomName").Text ~= text then
				toolName.Visible = false
				slot:FindFirstChild("CustomName").Text = text
			end
		end
	end

	local magichealth = player.PlayerGui:WaitForChild("ScreenGui"):WaitForChild("MagicHealth")
	local UltLabel = magichealth:WaitForChild("TextLabel")
	UltLabel.Visible = false
	local UltLabel = UltLabel:Clone()
	UltLabel.Visible = true
	UltLabel.Name = "UltThing"
	UltLabel.Parent = magichealth

local toolNameMap = {
		["Flowing Water"] = "the end is nigh",
		["Lethal Whirlwind Stream"] = "the end is null",
		["Hunter's Grasp"] = "???",
		["Prey's Peril"] = "leave us alone.",
		["Water Stream Cutting Fist"] = "endgame",
		["The Final Hunt"] = "rot in hell.",
		["Rock Splitting Fist"] = "e̴̦͓̳͓̠̪̘̫̥͕̰ͪͬ͑ͧ͌ͪ̐̌ͯ̎̄͋͝ṙ̴̶̵̢̨̡͔̖̗̗͉̺̞̤͇ͪͬ̿́̑̏̃̎̏ͤ̒̊ͦ̏̄̕͟ͅŕ͎͔̰̺̤͉̒̅͌́ͣ̃̈͟͝͠͡.̡̨̻̣͙̟͍̻̥͔̦͈̬̰͖̣̗ͩ̆͆̑ͧͧ̐̇̒̈́̀ͯ̀̉̀̐̓̀͜͢͜͝nủ̵̶̡̧̗͉͎̹̣̻̩̙̹͖̞ͨͭ̌́̆ͪ͑̾͑̓͐ͭ̿́͒̆̆ͯ̑ͪ̕̕͢͡l̴̨̡̹͚̼̫̣̹̤͙̰͉͈͕̠̼ͬͥ̆̃̀͒̋̎̒͊̍̆̀͂̀̅ͩ͊̚͜͜ͅl͇͚͖͛͆̌_̸̡̫̰̩̭͔̦̳ͦ͋͛̆̓̎̂̎̅͊̾͛ͤͩ͊͊̕͘͜͢͟͠ͅ",
		["Crushed Rock"] = "JOIN US"
	}

	local function typeText(label, text, delay)
		delay = delay or 0.05
		local originalText = text
		label.Text = ""
		for i = 1, #originalText do
			label.Text = string.sub(originalText, 1, i)
			task.wait(delay)
		end
	end
	local ultTexts = {"HERE I AM"
		
	}


	local typedTools = {}

	local function updateToolNames()
		for _, slot in ipairs(hotbar:GetChildren()) do
			if slot:FindFirstChild("Base") and slot.Base:FindFirstChild("ToolName") then
				local toolNameText = slot.Base.ToolName.Text
				local newName = toolNameMap[toolNameText]
				if newName then
					cloneToolName(slot.Base, newName)
					if slot.Base:FindFirstChild("CustomName") and not typedTools[newName] then
						typeText(slot.Base.CustomName, newName, 0.03)
						typedTools[newName] = true


					end
				end
			end
		end
	end

	task.spawn(
		function()
			local currentUltIndex = 1

			while true do
				typeText(UltLabel, ultTexts[currentUltIndex], 0.05)
				currentUltIndex = (currentUltIndex % #ultTexts) + 1

				pcall(
					function()
					end
				)

				updateToolNames()
				task.wait(10)
			end
		end
	)

	task.spawn(
		function()
			while task.wait(1) do
				updateToolNames()
			end
		end
	)

local a = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.MagicHealth.Health.Bar
a.ImageColor3 = Color3.fromRGB(0, 0, 0)

local b = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.MagicHealth.Health.Bar.Bar
b.ImageColor3 = Color3.fromRGB(0, 0, 0)

------SAFE PLACE TO KILL
local baseplate = Instance.new("Part")
baseplate.Size = Vector3.new(5000, 1, 5000)
baseplate.Anchored = true
baseplate.Name = "FarBaseplate"
baseplate.Position = Vector3.new(0, -494, 0)
baseplate.Parent = workspace

--[[LEFT ARM COLORS]]
 
local char = game.Players.LocalPlayer.Character
getgenv().LArmCol = char['Left Arm'].ChildAdded:Connect(function(pp)
if pp.Name == 'WaterPalm' then
for i,v in pairs(pp:WaitForChild('ConstantEmit'):GetChildren()) do
v.Color =
ColorSequence.new{ColorSequenceKeypoint.new(0.00, 
Color3.fromRGB(50, 25, 25)), -- Change Color (Red, Green, Blue)
ColorSequenceKeypoint.new(1.00, 
Color3.fromRGB(50, 25, 25))} -- Change Color (Red, Green, Blue)
end
 
pp:WaitForChild('WaterTrail').Color = 
ColorSequence.new{ColorSequenceKeypoint.new(0.00, 
Color3.fromRGB(50, 25, 25)), -- Change Color (Red, Green, Blue)
ColorSequenceKeypoint.new(1.00, 
Color3.fromRGB(50, 25, 25))} -- Change Color (Red, Green, Blue)
 
end end)
--[[RIGHT ARM colors]]
 
getgenv().RArmCol = char['Right Arm'].ChildAdded:Connect(function(pp)
if pp.Name == 'WaterPalm' then
for i,v in pairs(pp:WaitForChild('ConstantEmit'):GetChildren()) do
v.Color =
ColorSequence.new{ColorSequenceKeypoint.new(0.00, 
Color3.fromRGB(0, 0, 0)), -- Change Color (Red, Green, Blue)
ColorSequenceKeypoint.new(1.00, 
Color3.fromRGB(0, 0, 0))} -- Change Color (Red, Green, Blue)
end
pp:WaitForChild('WaterTrail').Color = 
ColorSequence.new{ColorSequenceKeypoint.new(0.00, 
Color3.fromRGB(0, 0, 0)), -- Change Color (Red, Green, Blue) 
ColorSequenceKeypoint.new(1.00, 
Color3.fromRGB(0, 0, 0))} -- Change Color (Red, Green, Blue)
 
end end)
 
--[[END OF GAROU COLORS]]
--[[ Improved Walk Animation Script (Non-Interfering) ]]

local animationId = 15962326593 -- Replace with your walk animation ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Create and load the walking animation
local walkAnimation = Instance.new("Animation")
walkAnimation.AnimationId = "rbxassetid://" .. animationId
local walkTrack = humanoid:LoadAnimation(walkAnimation)

-- Function to determine if the player is grounded
local function isGrounded()
    return humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping
end

-- Function to handle movement
local function onMove()
    if humanoid.MoveDirection.Magnitude > 0 and isGrounded() then
        if not walkTrack.IsPlaying then
            walkTrack.Looped = true
            walkTrack:Play()
            walkTrack:AdjustSpeed(3) -- Adjust speed as needed
        end
    else
        if walkTrack.IsPlaying then
            walkTrack:Stop()
        end
    end
end

-- Monitor movement changes
humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onMove)

-- Ensure animation stops on death
character:FindFirstChildOfClass("Humanoid").Died:Connect(function()
    walkTrack:Stop()
end)

-- Ensure animation stops when jumping or falling
humanoid.StateChanged:Connect(function(_, newState)
    if newState == Enum.HumanoidStateType.Jumping or newState == Enum.HumanoidStateType.Freefall then
        walkTrack:Stop()
    end
end)

--[[Move 2 ]]

local animationId = 12296113986 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

		 local AnimAnim2 = Instance.new("Animation")
        AnimAnim2.AnimationId = "rbxassetid://18897624255" --put your custom animation id here
        local Anim2 = Humanoid:LoadAnimation(AnimAnim2)
        
        if not Anim2 then return end 
        
        local startTime = 2.4
        Anim2:Play()
        Anim2:AdjustSpeed(0)
        Anim2.TimePosition = startTime
        Anim2:AdjustSpeed(0)
        delay(1.2, function()
        -- Create and play a new animation

		        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://14349470649" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 1.2
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
			wait(0.2)
		local Teleport = humanoidRootPart.CFrame
		humanoidRootPart.CFrame = CFrame.new(0, -492, 0)
        delay(1.2, function()
		humanoidRootPart.CFrame = Teleport
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
		end)
    end
end
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 2 start]]

local animationId = 12296882427 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[M1]]

local animationId = 13532562418 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[M2]]

local animationId = 13532600125  --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[m3]]

local animationId = 13532604085  --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[m4]]

local animationId = 13294471966 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 3 start]]

local animationId = 12307656616 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 1 start]]

local animationId = 12272894215 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 start]]

local animationId = 12351854556 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://17466449380" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 1
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[ULT]]

local animationId = 12342141464 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://16734584478" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
		Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(1.15)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(5.5, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 1]]

local animationId = 12273188754 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://17106188784" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0.3
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.55)
		 local Teleport = humanoidRootPart.CFrame
         humanoidRootPart.CFrame = CFrame.new(1000, -492, 0) 
		
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(3, function()
            Anim:Stop()
			humanoidRootPart.CFrame = Teleport
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 1 finish]]

local animationId = 14374357351 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://18896121004" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0.3
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.55)
		local Teleport = humanoidRootPart.CFrame
        humanoidRootPart.CFrame = CFrame.new(10000, 0, 0)
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(3, function()
            Anim:Stop()
			humanoidRootPart.CFrame = Teleport
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 4]]

local animationId = 13603396939 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://17466449380" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 1
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 4 finisher]]

local animationId = 14809836765 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://17466449380" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(2.5, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 3 ]]

local animationId = 12309835105 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        wait(0.2)
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://16719220174" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(5)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(2.5, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 3 ]]

local animationId = 12460977270 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://16719220174" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(5)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[Move 2 ult ]]

local animationId = 12467789963 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://16719220174" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(5)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
		local Teleport = humanoidRootPart.CFrame
        humanoidRootPart.CFrame = CFrame.new(0, -490, 0)
        delay(2.5, function()
			humanoidRootPart.CFrame = Teleport
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 2 ULT start]]

local animationId = 12463072679 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 3 ULT start]]

local animationId = 14057231976 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 6
		Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
		wait(.85)
        local Teleport = humanoidRootPart.CFrame
        humanoidRootPart.CFrame = CFrame.new(0, -490, 0)
        delay(1.3, function()
		humanoidRootPart.CFrame = Teleport
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 startup ult]]

local animationId = 72451715583225 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 landed ult]]

local animationId = 93546004428904 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        wait(4)
		local Teleport = humanoidRootPart.CFrame
        humanoidRootPart.CFrame = CFrame.new(0, -490, 0)
        delay(1.35, function()
            Anim:Stop()
			humanoidRootPart.CFrame = Teleport
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 main dash ult]]

local animationId = 13630786846 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://15958227342" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.35, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 main dash landed ult]]

local animationId = 13813099821 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        delay(2, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 varient dash landed ult]]

local animationId = 131226430469931 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
		local Teleport = humanoidRootPart.CFrame
        humanoidRootPart.CFrame = CFrame.new(0, -490, 0)
        delay(2, function()
			humanoidRootPart.CFrame = Teleport
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing	
		end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

--[[move 4 variant dash ult]]

local animationId = 135104210400610 --replace with your base animation
local soundId = 0 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end 
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://135104210400610" --put your custom animation id here
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end 
        
        local startTime = 0
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.1)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        delay(3, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

local Tool = Instance.new("Tool")
Tool.Name = "teleport"
Tool.RequiresHandle = false
Tool.Parent = game.Players.LocalPlayer.Backpack

local function onActivated()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end

    local mouse = player:GetMouse()
    local targetPos = mouse.Hit.Position -- Get click position
    
    -- Teleport above ground smoothly
    character.HumanoidRootPart.CFrame = CFrame.new(targetPos + Vector3.new(0, 3, 0))
end

Tool.Activated:Connect(onActivated)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer


local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(0, 10, 0.5, -75)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.Parent = screenGui

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(1, -10, 0, 40)
textBox.Position = UDim2.new(0, 5, 0, 5)
textBox.PlaceholderText = "Enter Player Name"
textBox.Text = ""
textBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
textBox.Parent = frame

local submitButton = Instance.new("TextButton")
submitButton.Size = UDim2.new(1, -10, 0, 40)
submitButton.Position = UDim2.new(0, 5, 0, 50)
submitButton.Text = "Submit"
submitButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
submitButton.Parent = frame

local function createButton(name, positionY, action)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 30)
    button.Position = UDim2.new(0, 5, 0, positionY)
    button.Text = name
    button.BackgroundColor3 = Color3.fromRGB(150, 100, 255)
    button.Visible = false
    button.Parent = frame
    button.MouseButton1Click:Connect(action)
    return button
end

local isStalking = false
local isScaring = false
local stalkingConnection = nil
local scaringConnection = nil

local function disableOnDeath()
    player.Character:WaitForChild("Humanoid").Died:Connect(function()
        isStalking = false
        isScaring = false
        if stalkingConnection then stalkingConnection:Disconnect() end
        if scaringConnection then scaringConnection:Disconnect() end
        print("Stalk and Scare disabled due to death.")
    end)
end

disableOnDeath()

local function stalkAction()
    if isStalking then
        isStalking = false
        if stalkingConnection then stalkingConnection:Disconnect() end
        print("Stalk stopped.")
    else
        local targetPlayer = Players:FindFirstChild(textBox.Text)
        if targetPlayer then
            isStalking = true
            print("Stalking started.")
            stalkingConnection = RunService.Heartbeat:Connect(function()
                if isStalking then
                    local targetHRP = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                    local myHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                    if targetHRP and myHRP then
                        myHRP.CFrame = CFrame.lookAt(myHRP.Position, targetHRP.Position)
                    end
                end
            end)
            task.spawn(function()
                while isStalking do
                    task.wait(10)
                    if isStalking and targetPlayer.Character and player.Character then
                        local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                        local myHRP = player.Character:FindFirstChild("HumanoidRootPart")
                        if targetHRP and myHRP then
                            local distance = math.random(80, 120)
                            local angle = math.rad(math.random(0, 360))
                            local offset = Vector3.new(math.cos(angle) * distance, 0, math.sin(angle) * distance)
                            myHRP.CFrame = CFrame.new(targetHRP.Position + offset)
                        end
                    end
                end
            end)
        end
    end
end

local function scareAction()
    if isScaring then
        isScaring = false
        if scaringConnection then scaringConnection:Disconnect() end
        print("Scare stopped.")
    else
        local targetPlayer = Players:FindFirstChild(textBox.Text)
        if targetPlayer then
            isScaring = true
            print("Scaring started.")
            scaringConnection = RunService.Heartbeat:Connect(function()
                if isScaring and targetPlayer.Character and player.Character then
                    local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                    local myHRP = player.Character:FindFirstChild("HumanoidRootPart")
                    if targetHRP and myHRP then
                        local distance = math.random(80, 120)
                        local angle = math.rad(math.random(0, 360))
                        local offset = Vector3.new(math.cos(angle) * distance, 0, math.sin(angle) * distance)
                        myHRP.CFrame = CFrame.new(targetHRP.Position + offset)
                        myHRP.CFrame = CFrame.lookAt(myHRP.Position, targetHRP.Position)
                    end
                end
            end)
        end
    end
end

local stalkButton = createButton("Stalk", 90, stalkAction)
local scareButton = createButton("Scare", 125, scareAction)

submitButton.MouseButton1Click:Connect(function()
    local enteredName = textBox.Text
    if enteredName ~= "" and Players:FindFirstChild(enteredName) then
        print("Target: " .. enteredName)
        stalkButton.Visible = true
        scareButton.Visible = true
    else
        print("Invalid player name.")
        stalkButton.Visible = false
        scareButton.Visible = false
    end
end)




local part = Instance.new("Part")
part.Size = Vector3.new(300, 1, 300)  -- 300 studs in X and Z axes, 1 stud in Y axis
part.Position = Vector3.new(184.7554931640625, 175.10330200195312, 80.5810546875)  -- Given position
part.Anchored = true  -- Keep the part anchored
part.CanCollide = true  -- Enable collision
part.BrickColor = BrickColor.new("Bright blue")  -- Optional: Set the part's color
part.Parent = workspace  -- Parent it to the workspace

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(0, 10, 0.75, -75)  -- Lowered the position
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.Parent = screenGui

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(1, -10, 0, 40)
textBox.Position = UDim2.new(0, 5, 0, 5)
textBox.PlaceholderText = "Enter STARER Name"
textBox.Text = ""
textBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
textBox.Parent = frame

local submitButton = Instance.new("TextButton")
submitButton.Size = UDim2.new(1, -10, 0, 40)
submitButton.Position = UDim2.new(0, 5, 0, 50)
submitButton.Text = "Submit"
submitButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
submitButton.Parent = frame

local function createButton(name, positionY, action)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 30)
    button.Position = UDim2.new(0, 5, 0, positionY)
    button.Text = name
    button.BackgroundColor3 = Color3.fromRGB(150, 100, 255)
    button.Visible = false
    button.Parent = frame
    button.MouseButton1Click:Connect(action)
    return button
end

-- Submit Button Click
submitButton.MouseButton1Click:Connect(function()
    local playerName = textBox.Text
    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer then
        -- Create buttons after a valid player is found
        local button = createButton("STARER", 90, function()
            print("STARER button clicked for " .. playerName)
        end)
        
        -- Make the button visible
        button.Visible = true

        -- Monitor the target player's gaze for more than 2 seconds
        local gazeCount = 0 -- Track how many times the player has looked at you
        local lastGazeTime = 0 -- Track time of last gaze
        local isHunting = false -- Hunt mode flag
        local gazeConnection
        local huntConnection

        local function monitorGaze()
            local targetPlayer = Players:FindFirstChild(playerName)
            if targetPlayer then
                local targetCharacter = targetPlayer.Character
                if targetCharacter and targetCharacter:FindFirstChild("Head") then
                    local head = targetCharacter.Head
                    local lastLookTime = 0
                    local isLooking = false
                    local timeStaring = 0 -- Track how long they've been staring

                    -- Loop to check if the player is staring at you
                    gazeConnection = game:GetService("RunService").Heartbeat:Connect(function()
                        -- If the player or target is dead, stop everything immediately
                        if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health <= 0 then
                            -- Stop gaze monitoring and camera lock
                            gazeConnection:Disconnect()
                            if huntConnection then
                                huntConnection:Disconnect() -- Stop hunt mode if active
                            end
                            print("Gaze detection disabled due to player death.")
                            return
                        end
                        
                        if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") and targetPlayer.Character.Humanoid.Health <= 0 then
                            -- Stop gaze monitoring and camera lock
                            gazeConnection:Disconnect()
                            if huntConnection then
                                huntConnection:Disconnect() -- Stop hunt mode if active
                            end
                            print("Gaze detection disabled due to target death.")
                            return
                        end
                        
                        -- Check if enough time has passed to allow the next gaze
                        if tick() - lastGazeTime >= 5 then
                            -- Get direction from the target player’s head to your player’s head
                            local directionToPlayer = (player.Character.Head.Position - head.Position).Unit
                            local playerLookDirection = targetCharacter.HumanoidRootPart.CFrame.LookVector
                            local distance = (head.Position - player.Character.Head.Position).Magnitude

                            -- Check if the player is facing within a threshold angle (e.g., 15 degrees)
                            local angleBetween = math.acos(playerLookDirection:Dot(directionToPlayer))
                            
                            -- If the player is looking towards you within a 15-degree cone and within 300 studs
                            if angleBetween < math.rad(15) and distance < 300 then
                                if not isLooking then
                                    lastLookTime = tick()
                                    isLooking = true
                                    timeStaring = 0 -- Reset staring time
                                    print("Target started staring at you.")
                                elseif tick() - lastLookTime > 2 then
                                    timeStaring = tick() - lastLookTime
                                    -- Only increment gaze count after staring for 2 seconds
                                    if timeStaring >= 2 then
                                        gazeCount = gazeCount + 1
                                        print("Gaze count: " .. gazeCount)
                                        lastGazeTime = tick() -- Update last gaze time
                                    end
                                    -- Teleport to the specified position when the stare is detected
                                    local newPos = Vector3.new(216.4971466064453, 189.68455505371094, 169.07150268554688)
                                    player.Character:SetPrimaryPartCFrame(CFrame.new(newPos))
                                    print("Teleported to target position after staring for 2 seconds!")
                                    isLooking = false
                                end
                                
                                -- Activate "hunt" mode only on the third gaze
                                if gazeCount == 3 and not isHunting then
                                    isHunting = true
                                    print("Hunt mode activated!")
                                    -- Lock the camera and make the character automatically face the target
                                    huntConnection = game:GetService("RunService").Heartbeat:Connect(function()
                                        if isHunting and targetPlayer.Character then
                                            -- Lock the camera on the target
                                            camera.CFrame = CFrame.new(camera.CFrame.Position, targetPlayer.Character.HumanoidRootPart.Position)
                                            -- Make the character face the target
                                            player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.Position, targetPlayer.Character.HumanoidRootPart.Position)
                                        end
                                    end)
                                end
                            else
                                isLooking = false
                            end
                        end
                    end)
                end
            end
        end

        -- Start monitoring the gaze
        monitorGaze()
    else
        print("Player not found!")
    end
end)

local tool = Instance.new("Tool")
tool.Name = "wait"
tool.RequiresHandle = false -- No need for a physical handle

tool.Activated:Connect(function()
    local player = game.Players.LocalPlayer
    if player and player.Character then
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.CFrame = CFrame.new(325.74578857421875, 676.2523803710938, 459.057373046875)
        end
    end
end)

tool.Parent = game.Players.LocalPlayer.Backpack

-- Set the speed to 20
local speed = 50

-- Function to constantly loop speed
local function loopSpeed()
    while true do
        humanoid.WalkSpeed = speed
        wait(0.1)  -- Wait a bit before checking again
    end
end

-- Start the speed loop
loopSpeed()
