

-- [[MOVES NAME]]

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Plgh"


--[[Move 2]]
local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "plgue"


--[[Move 3]]
local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "bro im just making this more confusing so people cant steal my scripts -Ban/ashley/whateveer"


--[[Move 4]]
local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Move 4 Name Here"


--[[Ultimate Name]]
local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Let Me Cure You"

            end

        end

    end

end


playerGui.DescendantAdded:Connect(findGuiAndSetText)

findGuiAndSetText()


--------------

--- [[MOVE NAMES SETUP]]
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local hotbar = playerGui:FindFirstChild("Hotbar")

-- Define unique names for each tool
local toolNames = {
    "Come Here",
    "You Are Sick",
    "SCP 106",
    "Do Not Run"
}

if hotbar then
    local backpack = hotbar:FindFirstChild("Backpack")
    if backpack then
        local hotbarFrame = backpack:FindFirstChild("Hotbar")
        if hotbarFrame then
            for i = 1, 4 do
                local baseButton = hotbarFrame:FindFirstChild(tostring(i))
                if baseButton and baseButton:FindFirstChild("Base") then
                    local toolName = baseButton.Base:FindFirstChild("ToolName")

                    if toolName then
                        toolName.Text = toolNames[i] or ("Move " .. i)

                        -- If it's Move 1, create or adjust the "AERIAL VARIANT" label
                        if i == 1 then
                            local aerialVariantLabel = baseButton:FindFirstChild("AerialVariant")

                            if not aerialVariantLabel then
                                aerialVariantLabel = Instance.new("TextLabel")
                                aerialVariantLabel.Name = ""
                                aerialVariantLabel.Parent = baseButton -- Attach to button for visibility
                                aerialVariantLabel.Size = UDim2.new(1, 0, 0.2, 0) -- Bigger text
                                aerialVariantLabel.Position = UDim2.new(0, 0, 0.85, 0) -- **Moved slightly higher**
                                aerialVariantLabel.BackgroundTransparency = 1 -- **No background**
                                aerialVariantLabel.BorderSizePixel = 0 -- No border
                                aerialVariantLabel.TextColor3 = Color3.new(1, 1, 1) -- **Pure White**
                                aerialVariantLabel.TextScaled = true
                                aerialVariantLabel.Font = Enum.Font.GothamBlack -- **Bold & sharp**
                                aerialVariantLabel.TextStrokeTransparency = 0
                                aerialVariantLabel.TextStrokeColor3 = Color3.new(0, 0, 0) -- Black outline for contrast
                                aerialVariantLabel.ZIndex = 10 -- Draws above everything
                            end

                            aerialVariantLabel.Text = "AERIAL"
                        end
                    end
                end
            end
        end
    end
end



--- [[MOVE NAMES SETUP]]
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local hotbar = playerGui:FindFirstChild("Hotbar")

-- Define unique names for each tool
local toolNames = {
    "Come Here",
    "You Are Sick",
    "Scp 106",
    "Do Not Run"
}

if hotbar then
    local backpack = hotbar:FindFirstChild("Backpack")
    if backpack then
        local hotbarFrame = backpack:FindFirstChild("Hotbar")
        if hotbarFrame then
            for i = 1, 4 do
                local baseButton = hotbarFrame:FindFirstChild(tostring(i))
                if baseButton and baseButton:FindFirstChild("Base") then
                    local toolName = baseButton.Base:FindFirstChild("ToolName")
                    
                    if toolName then
                        toolName.Text = toolNames[i] or ("Move " .. i)

                        -- If it's Move 1, create or adjust the "AERIAL VARIANT" label
                        if i == 1 then
                            local aerialVariantLabel = baseButton.Base:FindFirstChild("AerialVariant")
                            
                            if not aerialVariantLabel then
                                aerialVariantLabel = Instance.new("TextLabel")
                                aerialVariantLabel.Name = "AerialVariant"
                                aerialVariantLabel.Parent = baseButton.Base
                                aerialVariantLabel.Size = UDim2.new(1, 0, 0.35, 0) -- Slightly larger
                                aerialVariantLabel.Position = UDim2.new(0, 0, 0.85, 0) -- Adjusted position
                                aerialVariantLabel.BackgroundTransparency = 1
                                aerialVariantLabel.TextColor3 = Color3.new(1, 1, 0.5) -- Brighter (Yellowish White)
                                aerialVariantLabel.TextScaled = true
                                aerialVariantLabel.Font = Enum.Font.SourceSansBold
                            end

                            aerialVariantLabel.Text = "AERIAL VARIANT"
                        end
                    end
                end
            end
        end
    end
end



-- [[ULTIMATE NAME]]
local function setUltimateName()
    local screenGui = playerGui:FindFirstChild("ScreenGui")
    if screenGui then
        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")
        if magicHealthFrame then
            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")
            if textLabel then
                textLabel.Text = "Let Me Cure You"
            end
        end
    end
end

playerGui.DescendantAdded:Connect(setUltimateName)
setUltimateName()


--- [[MOVE 1]]
local animationId = "rbxassetid://16139108718"
local soundId = "rbxassetid://128741351184513" -- Sound to play

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Create sound instance
local sound = Instance.new("Sound")
sound.SoundId = soundId
sound.Volume = 1
sound.Parent = rootPart

-- Function to find the closest player facing
local function findClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge
    local maxDistance = 100 -- Maximum distance to check
    local direction = rootPart.CFrame.LookVector -- The direction the player is facing

    -- Iterate through all players
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherCharacter = otherPlayer.Character
            local otherRootPart = otherCharacter:WaitForChild("HumanoidRootPart")
            
            -- Calculate the distance from the player's root part to the other player's root part
            local distance = (rootPart.Position - otherRootPart.Position).magnitude
            
            -- Check if the player is within the max distance and facing the other player
            if distance < maxDistance then
                local vectorToPlayer = (otherRootPart.Position - rootPart.Position).unit
                local dotProduct = direction:Dot(vectorToPlayer) -- Check if player is facing the other player

                if dotProduct > 0.5 and distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = otherPlayer
                end
            end
        end
    end

    return closestPlayer
end

local function teleportToLocation()
    local closestPlayer = findClosestPlayer()
    
    if closestPlayer then
        local closestCharacter = closestPlayer.Character
        local closestRootPart = closestCharacter:WaitForChild("HumanoidRootPart")
        
        -- Get the distance to the closest player
        local distanceToPlayer = (rootPart.Position - closestRootPart.Position).magnitude
        
        -- Only teleport if the player is within 50 studs
        if distanceToPlayer <= 50 then
            -- Find a position near the closest player, but avoid overlapping
            local offset = Vector3.new(5, 0, 0) -- Change this to adjust the offset direction and distance
            local targetPosition = closestRootPart.Position + offset
            
            -- Ensure the target position is clear and not inside any object
            local ray = Ray.new(targetPosition, Vector3.new(0, -1, 0))
            local hit, position = workspace:FindPartOnRay(ray, character)
            
            -- If the position is not valid, try a different offset
            if hit then
                position = position + Vector3.new(0, 5, 0) -- Adjust the height to prevent collision
            end

            -- Teleport to a valid position near the closest player
            rootPart.CFrame = CFrame.new(position)
            
            -- Now rotate to face the closest player
            local direction = (closestRootPart.Position - rootPart.Position).unit
            local targetCFrame = CFrame.lookAt(rootPart.Position, closestRootPart.Position)
            
            -- Smoothly rotate to face the target
            for i = 0, 1, 0.1 do
                rootPart.CFrame = rootPart.CFrame:Lerp(targetCFrame, i)
                wait(0.05)
            end
        end
    end
end

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == animationId then
        -- Stop all animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Play new animation
        local animInstance = Instance.new("Animation")
        animInstance.AnimationId = "rbxassetid://16139108718"
        local anim = humanoid:LoadAnimation(animInstance)
        anim:Play()
        anim:AdjustSpeed(1.3)
        
        -- Play sound
        sound:Play()
        
        -- Teleport to the closest player and rotate to face them
        teleportToLocation()
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)


----------



-- [[MOVE 1 AERIAL ANIMATION + IMMEDIATE TELEPORT TO SPECIFIC LOCATION]]
local animationId = "rbxassetid://16571461202"
local soundId = "rbxassetid://128741351184513" -- Sound to play

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Create sound instance
local sound = Instance.new("Sound")
sound.SoundId = soundId
sound.Volume = 1
sound.Parent = rootPart

local function teleportToLocation()
    if rootPart then
        -- Anchor the player for 0.8 seconds
        humanoid.RootPart.Anchored = true
        wait(0.8)
        humanoid.RootPart.Anchored = false
        
        local previousPosition = rootPart.CFrame -- Store previous position
        wait()
        rootPart.CFrame = CFrame.new(22800, 98950, 0) -- Teleport to void
        
        -- Wait 0.4 seconds then teleport back
        task.delay(0.4, function()
            rootPart.CFrame = previousPosition
            wait(0.2)
            rootPart.CFrame = previousPosition
        end)
    end
end

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == animationId then
        -- Stop all animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Play new animation
        local animInstance = Instance.new("Animation")
        animInstance.AnimationId = "rbxassetid://16139108718"
        local anim = humanoid:LoadAnimation(animInstance)
        anim:Play()
        anim:AdjustSpeed(1.3)
        
        -- Play sound
        sound:Play()
        
        -- Teleport to the specified location immediately
        teleportToLocation()
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)



--[[Move 1 Miss Anim]]

local animationId = 12272894215


local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")


local function onAnimationPlayed(animationTrack)

    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then


local p = game.Players.LocalPlayer

local Humanoid = p.Character:WaitForChild("Humanoid")


for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do

    animTrack:Stop()

end


local AnimAnim = Instance.new("Animation")

AnimAnim.AnimationId = "rbxassetid://your anim id here"

local Anim = Humanoid:LoadAnimation(AnimAnim)


local startTime = 0


Anim:Play()

Anim:AdjustSpeed(0.1)

Anim.TimePosition = startTime

Anim:AdjustSpeed(0.5) -- [[speed of the move anim]]


    end

end

--[[MOVE ONE]]

-- Define the void coordinates
local voidPosition = Vector3.new(10051.62109375, 5.499998569488525, 9785.33984375)
local originalPosition = nil -- Store original position

-- Animation ID to check
local animationId = "rbxassetid://12296113986"
local soundId = "rbxassetid://7651509790" -- Sound to play

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Create sound instance
local sound = Instance.new("Sound")
sound.SoundId = soundId
sound.Volume = 5
sound.Parent = rootPart

-- Preload the sound
game:GetService("ContentProvider"):PreloadAsync({sound})

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == animationId then
        -- Stop all current animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Play new animation
        local newAnim = Instance.new("Animation")
        newAnim.AnimationId = "rbxassetid://14809836765"
        local newTrack = humanoid:LoadAnimation(newAnim)
        
        newTrack:Play()
        newTrack:AdjustSpeed(1.3)
        newTrack.TimePosition = 0
        newTrack:AdjustSpeed(1)
        
        -- Play sound
        sound:Play()
        
        -- Teleport player to void coordinates
        if rootPart then
            originalPosition = rootPart.CFrame -- Store original position
            rootPart.CFrame = CFrame.new(voidPosition)
            
            -- Teleport back after 3.5 seconds
            task.delay(3.5, function()
                if rootPart and originalPosition then
                    rootPart.CFrame = originalPosition
                end
            end)
        end
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[Move TWO]]
local animationId = 16515850153

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function to find the closest player
local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge -- Start with a very high number

    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherHumanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHumanoidRootPart then
                local distance = (character.HumanoidRootPart.Position - otherHumanoidRootPart.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = otherPlayer
                end
            end
        end
    end
    return closestPlayer
end

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        -- Stop other animations
        for _, animTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://16515850153"
        local Anim = humanoid:LoadAnimation(AnimAnim)

        local startTime = 0
        Anim:Play()
        Anim:AdjustSpeed(0.1)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.5) -- Speed of the move animation

        -- Store the original position before teleporting
        local originalPosition = character.HumanoidRootPart.Position

        -- Create a teleport sound
        local teleportSound = Instance.new("Sound")
        teleportSound.SoundId = "rbxassetid://YOUR_SOUND_ID_HERE"  -- Replace with your sound ID
        teleportSound.Parent = character
        teleportSound:Play()

        -- Wait for 3 seconds, then teleport to the closest player
        wait(4.7)
        local closestPlayer = getClosestPlayer()
        if closestPlayer and closestPlayer.Character then
            local targetPosition = closestPlayer.Character.HumanoidRootPart.Position
            character:SetPrimaryPartCFrame(CFrame.new(targetPosition))

            -- Wait another 3 seconds before teleporting back
            wait(0.1)
            character:SetPrimaryPartCFrame(CFrame.new(originalPosition))
        end
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)


--[[End Of Move 2  Anim]]

--[[Move 3]]

local animationId = 16431491215
local soundId = 347611423 -- Replace with your sound asset ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character and p.Character:FindFirstChild("Humanoid")
        
        if not Humanoid then return end -- Ensure humanoid exists
        
        -- Stop all playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end
        
        -- Create and play a new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://17889458563"
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        
        if not Anim then return end -- Ensure animation loads
        
        local startTime = 0.3
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.8)
        
        -- Create and play a sound
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. soundId
        sound.Parent = character -- Attach to character
        sound.Volume = 1 -- Adjust volume as needed
        sound.PlayOnRemove = true -- Ensures it plays instantly when removed
        sound:Play()
        
        delay(1.8, function()
            Anim:Stop()
            sound:Destroy() -- Clean up the sound after it's done playing
        end)
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

-- Animation ID
local animationId = "rbxassetid://16431491215"
local cooldownTime = 2  -- Cooldown in seconds
local canCreateMesh = true  -- Flag to manage cooldown

-- Function to execute the part creation when the animation plays
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == animationId and canCreateMesh then
        canCreateMesh = false  -- Set the flag to false to prevent mesh creation

        -- Wait for the character to fully load
        local head = character:WaitForChild("Head")

        -- Get the position of the floor 20 studs in front of the character
        local direction = head.CFrame.LookVector  -- Direction the character is facing
        local spawnPosition = head.Position + direction * 20  -- Position 20 studs in front of the character

        -- Cast a ray downward to detect the floor
        local ray = Ray.new(spawnPosition + Vector3.new(0, 50, 0), Vector3.new(0, -100, 0))  -- Ray pointing downward
        local hit, position = workspace:FindPartOnRay(ray, character)

        -- Create the mesh part at the spawn position (on the floor)
        local meshPart = Instance.new("Part")
        meshPart.Size = Vector3.new(2, 3, 2)  -- Set the size of the part to hold the mesh
        meshPart.Position = position + Vector3.new(0, 2.89, 0)  -- Position it exactly 3 studs higher than before
        meshPart.Anchored = true
        meshPart.CanCollide = false
        meshPart.Name = "MeshDummy"

        -- Add the mesh to the part
        local mesh = Instance.new("SpecialMesh")
        mesh.Parent = meshPart
        mesh.MeshId = "rbxassetid://17184419222"  -- The correct mesh ID
        mesh.Scale = Vector3.new(1, 1, 1)  -- Adjust scale if needed

        -- Add the texture to the part
        local texture = Instance.new("Texture")
        texture.Parent = meshPart
        texture.Texture = "rbxassetid://17184419346"  -- The texture ID
        texture.Face = Enum.NormalId.Front  -- Apply the texture to the front face of the mesh

        -- Fix mesh orientation to face the player and rotate it by -90 degrees
        local directionToFace = (character.HumanoidRootPart.Position - meshPart.Position).unit -- Direction vector towards the player
        local lookAtCFrame = CFrame.new(meshPart.Position, meshPart.Position + directionToFace)  -- Face the player
        local rotatedCFrame = lookAtCFrame * CFrame.Angles(0, math.rad(-90), 0)  -- Rotate it -90 degrees around the Y-axis

        meshPart.CFrame = rotatedCFrame  -- Apply the rotated CFrame to the mesh

        -- Parent the mesh part to the workspace
        meshPart.Parent = workspace

        -- Create the new part underneath the mesh to hold the decal
        local decalPart = Instance.new("Part")
        decalPart.Size = Vector3.new(20, 1, 20)  -- 10 studs long, 1 stud high
        decalPart.Position = position + Vector3.new(0, -0.5, 0)  -- Position it just below the mesh
        decalPart.Anchored = true
        decalPart.CanCollide = false
        decalPart.Name = "DecalPart"

        -- Make the part invisible
        decalPart.Transparency = 1  -- Fully transparent

        -- Add the decal to the part
        local decal = Instance.new("Decal")
        decal.Parent = decalPart
        decal.Texture = "rbxassetid://16033384869"  -- The decal ID
        decal.Face = Enum.NormalId.Top  -- Apply the decal to the top face of the new part

        -- Parent the new part with the decal to the workspace
        decalPart.Parent = workspace

        -- Wait for 15 seconds and then destroy the parts
        wait(15)
        meshPart:Destroy()  -- Destroy the mesh part
        decalPart:Destroy()  -- Destroy the decal part

        -- After the cooldown time, allow the mesh to be created again
        wait(cooldownTime)
        canCreateMesh = true  -- Reset the cooldown flag
    end
end

-- Connect the function to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)



--[[End Of Move 3 Anim]]


--[[Move 4 with Sound]]

local animationId = 13603396939
local soundId = 5177808764 -- Sound ID

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function to play sound
local function playSound()
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://" .. soundId
    sound.Volume = 1 -- Adjust volume as needed
    sound.PlaybackSpeed = 1 -- Adjust speed if necessary
    sound.Parent = character:FindFirstChild("HumanoidRootPart") or character -- Attach to character
    sound:Play()
    sound.Ended:Connect(function()
        sound:Destroy()
    end)
end

-- Function triggered when animation is played
local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character:WaitForChild("Humanoid")

        -- Stop all other playing animations
        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        -- Create and play new animation
        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://14494902453"
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        Anim:Play()
        Anim:AdjustSpeed(0)
        Anim.TimePosition = 0
        Anim:AdjustSpeed(1) -- Adjust animation speed
        
        -- Play sound
        playSound()
    end
end

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

local Tool = Instance.new("Tool")
Tool.Name = "Teleport Tool"
Tool.RequiresHandle = false
Tool.Parent = game.Players.LocalPlayer.Backpack

local function onActivated()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end

    local mouse = player:GetMouse()
    local targetPos = mouse.Hit.Position -- Get click position
    
    -- Teleport above ground smoothly
    character.HumanoidRootPart.CFrame = CFrame.new(targetPos + Vector3.new(0, 3, 0))
end

Tool.Activated:Connect(onActivated)






--[[End Of Move 4 Anim with Sound]]

--[[Move 4 Miss Anim]]

local animationId = 12351854556

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onAnimationPlayed(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        local p = game.Players.LocalPlayer
        local Humanoid = p.Character:WaitForChild("Humanoid")

        for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        local AnimAnim = Instance.new("Animation")
        AnimAnim.AnimationId = "rbxassetid://13874287198"
        
        local Anim = Humanoid:LoadAnimation(AnimAnim)
        local startTime = 0
        
        Anim:Play()
        Anim:AdjustSpeed(0.1)
        Anim.TimePosition = startTime
        Anim:AdjustSpeed(0.7) -- [[speed of the move anim]]
        
        -- Stop animation after 1.2 seconds
        task.delay(1.2, function()
            Anim:Stop()
        end)
    end
end

--[[End Of Move 4 Miss Anim]]


--[[Wall combo]]

humanoid.AnimationPlayed:Connect(onAnimationPlayed)

local animationId = 16310343179


local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")


local function onAnimationPlayed(animationTrack)

    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then

local p = game.Players.LocalPlayer

local Humanoid = p.Character:WaitForChild("Humanoid")


for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do

    animTrack:Stop()

end


local AnimAnim = Instance.new("Animation")

AnimAnim.AnimationId = "rbxassetid://your anim id here"

local Anim = Humanoid:LoadAnimation(AnimAnim)


local startTime = 0.05


Anim:Play()

Anim:AdjustSpeed(0)

Anim.TimePosition = startTime

Anim:AdjustSpeed(0.7) -- [[speed of the move anim]]


    end

end

--[[END OF WALL COMBO ANIM]]

--[[Dash]]
local animationId = 10479335397


local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")


local function onAnimationPlayed(animationTrack)

    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then


local p = game.Players.LocalPlayer

local Humanoid = p.Character:WaitForChild("Humanoid")


for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do

    animTrack:Stop()

end


local AnimAnim = Instance.new("Animation")

AnimAnim.AnimationId = "rbxassetid://135104210400610" --[[i gave you cool one]]

local Anim = Humanoid:LoadAnimation(AnimAnim)


local startTime = 0


Anim:Play()

Anim:AdjustSpeed(0.1)

Anim.TimePosition = startTime

Anim:AdjustSpeed(1) -- [[speed of the move anim]]


    end

end

--[[End Of Dash Anim]]

--[[Ult Activation]]

humanoid.AnimationPlayed:Connect(onAnimationPlayed)


local animationId = 12342141464


local player = game.Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()

local humanoid = character:WaitForChild("Humanoid")


local function onAnimationPlayed(animationTrack)

    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then

local p = game.Players.LocalPlayer

local Humanoid = p.Character:WaitForChild("Humanoid")


for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do

    animTrack:Stop()

end


local AnimAnim = Instance.new("Animation")

AnimAnim.AnimationId = "rbxassetid://17107937300"

local Anim = Humanoid:LoadAnimation(AnimAnim)


local startTime = 0


Anim:Play()

Anim:AdjustSpeed(0)

Anim.TimePosition = startTime

Anim:AdjustSpeed(1.5) -- [[speed of the move anim]]


    end

end
--[[END OF ULT ACTIVATION ANIM]]


-- Function to create the GUI
local function createGUI()
    -- Ensure any existing GUI is destroyed before creating a new one
    local existingGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("PurificationTouch")
    if existingGui then
        existingGui:Destroy() -- Remove the old GUI if it exists
    end

    -- Create the new GUI
    local ScreenGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local TextButton = Instance.new("TextButton")
    local TextLabel = Instance.new("TextLabel")

    -- Set GUI name
    ScreenGui.Name = "PurificationTouch"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false

    Frame.Parent = ScreenGui
    Frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Transparent Gray Effect
    Frame.BackgroundTransparency = 0.3
    Frame.BorderColor3 = Color3.fromRGB(0, 0, 0) -- Black Border
    Frame.BorderSizePixel = 3 -- Thicker Outline
    Frame.Position = UDim2.new(0.341, 0, 0.367, 0)
    Frame.Size = UDim2.new(0, 190, 0, 130) -- Slightly bigger

    TextButton.Parent = Frame
    TextButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0) -- Black Border
    TextButton.BorderSizePixel = 3 -- Thicker Outline
    TextButton.Position = UDim2.new(0.1, 0, 0.6, 0)
    TextButton.Size = UDim2.new(0, 150, 0, 40) -- Adjusted for longer text
    TextButton.Font = Enum.Font.Arial -- Changed Font to Arial
    TextButton.Text = "Disabled"
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 32 -- Slightly smaller for better fit

    TextLabel.Parent = Frame
    TextLabel.BackgroundTransparency = 1
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0.05, 0, 0.08, 0)
    TextLabel.Size = UDim2.new(0, 170, 0, 45) -- Adjusted to fit text
    TextLabel.Font = Enum.Font.Arial -- Changed Font to Arial
    TextLabel.Text = "Purification Touch"
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 34
    TextLabel.TextWrapped = true -- Ensures text wraps inside the box

    -- Function to remove GUI and scripts when the player dies or executes the script again
    local function cleanup()
        -- Destroy the GUI and its LocalScripts
        if ScreenGui then
            -- Destroy the entire GUI
            ScreenGui:Destroy()
        end
    end

    -- Listen for player's death after respawn
    game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
        -- Wait for the humanoid to be added to the character
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.Died:Connect(cleanup) -- Connect the death event
    end)

    -- Script for Button functionality
    local function CTIKC_fake_script() -- TextButton.LocalScript 
        local script = Instance.new('LocalScript', TextButton)
        
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")

        local toggleButton = script.Parent
        local hiddenfling = false

        if not ReplicatedStorage:FindFirstChild("juisdfj0i32i0eidsuf0iok") then
            local detection = Instance.new("Decal")
            detection.Name = "juisdfj0i32i0eidsuf0iok"
            detection.Parent = ReplicatedStorage
        end

        local function fling()
            local hrp, c, vel, movel = nil, nil, nil, 0.1
            local lp = Players.LocalPlayer

            while true do
                RunService.Heartbeat:Wait()
                if hiddenfling then
                    while hiddenfling and not (c and c.Parent and hrp and hrp.Parent) do
                        RunService.Heartbeat:Wait()
                        c = lp.Character
                        hrp = c and c:FindFirstChild("HumanoidRootPart")
                    end

                    if hiddenfling then
                        vel = hrp.Velocity
                        hrp.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)
                        RunService.RenderStepped:Wait()
                        if c and c.Parent and hrp and hrp.Parent then
                            hrp.Velocity = vel
                        end
                        RunService.Stepped:Wait()
                        if c and c.Parent and hrp and hrp.Parent then
                            hrp.Velocity = vel + Vector3.new(0, movel, 0)
                            movel = movel * -1
                        end
                    end
                end
            end
        end

        toggleButton.MouseButton1Click:Connect(function()
            hiddenfling = not hiddenfling
            if hiddenfling then
                toggleButton.Text = "ENABLED"
            else
                toggleButton.Text = "DISABLED"
            end
        end)

        fling()

    end
    coroutine.wrap(CTIKC_fake_script)()

    -- Script for making the frame draggable
    local function FFJFK_fake_script() -- Frame.LocalScript 
        local script = Instance.new('LocalScript', Frame)

        script.Parent.Active = true
        script.Parent.Draggable = true
    end
    coroutine.wrap(FFJFK_fake_script)()
end

-- Check if the GUI already exists, and remove it before creating a new one
if game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("PurificationTouch") then
    game.Players.LocalPlayer.PlayerGui.PurificationTouch:Destroy() -- Destroy if it already exists
end

-- Create the GUI
createGUI()



local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)

-- Load the animation
local walkAnimation = Instance.new("Animation")
walkAnimation.AnimationId = "rbxassetid://16599253604"
local walkAnimTrack = animator:LoadAnimation(walkAnimation)

-- Play the animation when walking, stop when idle
humanoid.Running:Connect(function(speed)
    if speed > 0 then
        if not walkAnimTrack.IsPlaying then
            walkAnimTrack:Play()
        end
    else
        walkAnimTrack:Stop()
    end
end)

-- Ensure the script is placed in the StarterPlayerScripts or a local script
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Set the speed to 20
local speed = 23

-- Function to constantly loop speed
local function loopSpeed()
    while true do
        humanoid.WalkSpeed = speed
        wait(0.1)  -- Wait a bit before checking again
    end
end

-- Start the speed loop
loopSpeed()

